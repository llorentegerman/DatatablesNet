@model IEnumerable<DatatablesNet.Models.Contacto>
@{
    ViewBag.Title = "Ejemplo3";
}

@section headSection {
}

@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $('#example').DataTable({
                columns: [
                    //Extraigo la definición de las columnas desde el mismo modelo.
                    //Posiciono las columnas según el orden en el que aparezcan en la lista pasada por parámetro.
                    //Si no deseo mostrar alguna columna, simplemente la borro de esta lista.
                    @Html.Raw(DatatablesNet.Auxiliares.DataTablesAux.ColumnsFromModel(typeof(DatatablesNet.Models.Contacto), 
                        new List<string>() { "Nombre", "Localidad", "Id", "Direccion", "Apellido", "Email", "Telefono" }) //Posiciones
                    )
                ],
                //Serialize List
                aaData: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, Newtonsoft.Json.Formatting.None, new Newtonsoft.Json.Converters.IsoDateTimeConverter() { DateTimeFormat = "yyyy/MM/dd" })),
            });

        });
    </script>
}

<h2>Ejemplo 3 - Posición de las columnas</h2>


<p>
    Definición de columnas y datos tomados desde una Lista pasada como modelo.<br />
    <b>A diferencia del ejemplo anterior, en este ejemplo se utiliza un parámetro para indicar la posición en el que deseamos mostrar las columnas.</b>
    Con este parámetro podemos decidir tambien cuales columnas incluir y cuales no.<br />
    En próximos ejemplos vamos a ver como podemos incluir una columna sin hacerla visible. La diferencia con la técnica de este ejemplo, 
    es que tendremos disponible el dato de esa columna para utilizarlo. Es común hacerlo con campos como por ejemplo el ID, el cual nos
    puede ser útil, pero no queremos mostrarlo.
</p>
<a class="btn btn-primary" role="button" data-toggle="collapse" href="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
    View Source Code - Ver Codigo Fuente
</a>
<div class="collapse" id="collapseExample">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="active"><a href="#html1" aria-controls="html1" role="tab" data-toggle="tab">HTML</a></li>
        <li role="presentation"><a href="#javascript1" aria-controls="javascript1" role="tab" data-toggle="tab">Javascript</a></li>
        <li role="presentation"><a href="#css1" aria-controls="css1" role="tab" data-toggle="tab">CSS</a></li>
        <li role="presentation"><a href="#csharp1" aria-controls="csharp1" role="tab" data-toggle="tab">C# (Backend)</a></li>
        <li role="presentation"><a href="#csharp1_2" aria-controls="csharp1_2" role="tab" data-toggle="tab">C# (ColumnsFromModel)</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="html1">
            <pre>
<code class="language-html">&lt;table id=&quot;example&quot; class=&quot;display&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;
    &lt;thead&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;        
    &lt;/tbody&gt;
&lt;/table&gt;</code>
            </pre>
        </div>
        <div role="tabpanel" class="tab-pane" id="javascript1">
            <pre>
<code class="language-javascript">$(document).ready(function () {
    $('#example').DataTable({
        columns: [
                    //Extraigo la definición de las columnas desde el mismo modelo.
                    //Posiciono las columnas según el orden en el que aparezcan en la lista pasada por parámetro.    
                    //Si no deseo mostrar alguna columna, simplemente la borro de esta lista.
                    @@Html.Raw(DatatablesNet.Auxiliares.DataTablesAux.ColumnsFromModel(typeof(DatatablesNet.Models.Contacto), 
                        new List<string>() { "Nombre", "Localidad", "Id", "Direccion", "Apellido", "Email", "Telefono" }) //Posiciones
                    )
                ],
                //Serialize List
                aaData: @@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, Newtonsoft.Json.Formatting.None, new Newtonsoft.Json.Converters.IsoDateTimeConverter() { DateTimeFormat = "yyyy/MM/dd" })),
    });
});</code>
            </pre>
        </div>

        <div role="tabpanel" class="tab-pane" id="css1">...</div>
        <div role="tabpanel" class="tab-pane" id="csharp1">
            <pre>
<code class="language-csharp">public ActionResult Ejemplo3()
{   
    return View(Contactos);
}</code>
            </pre>
        </div>
        <div role="tabpanel" class="tab-pane" id="csharp1_2">
            <pre>
<code class="language-csharp">public static string ColumnsFromModel(Type modelType, List&lt;string&gt; ColumnsOrder = null)
{
    PropertyInfo[] props = modelType.GetProperties(); //Obtengo todos los atributos de la clase
    int cantidadDeColumnas = ColumnsOrder == null ? props.Count() : ColumnsOrder.Count;
    
    string[] listHeaderDefinition = new string[cantidadDeColumnas];
    for(int i= 0; i &lt; props.Count(); i++)
    {
        PropertyInfo prop = props[i];
        string attributeName = prop.Name;
        //Extraigo el DisplayAttribute, el cual utilizamos para definir cual sera el titulo a mostrar de esa columna.
        //En caso de que no tenga, utilizo como displayName el nombre del atributo.
        DisplayAttribute displayAttribute = prop.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute;
        string displayName = displayAttribute != null ? displayAttribute.Name : attributeName.ToLower(); //Lo extraigo.
        //Segun el tipo del atributo, lo mapeo a su correspondiente tipo en Datatables
        string sType = prop.PropertyType.ToString().ToLower();
        string sTipo = &quot;string&quot;; //Type por defecto.
        if (sType.IndexOf(&quot;int&quot;) &gt;= 0 || sType.IndexOf(&quot;double&quot;) &gt;= 0 || sType.IndexOf(&quot;float&quot;) &gt;= 0 ||
            sType.IndexOf(&quot;real&quot;) &gt;= 0 || sType.IndexOf(&quot;single&quot;) &gt;= 0)
        {
            sTipo = &quot;num&quot;;
        }
        else if (sType.IndexOf(&quot;date&quot;) &gt;= 0)
        {
            sTipo = &quot;custom-date&quot;; //Este es un tipo customizado, creado para que las fechas se adapten al formato dd/MM/yyyy
        }
        int position = i;   //Si no definí ColumnsOrder, entonces las columnas se mostraran en el orden en el que estan 
                            //definidos los atributos.
        if (ColumnsOrder != null)
        {
            position = ColumnsOrder.FindIndex(c =&gt; c.ToLower().Trim().Equals(attributeName.ToLower().Trim()));
        }
        if(position &gt;= 0) //position sera &lt; 0, solo si no inclui a esta columna dentro de &quot;ColumnsOrder&quot;
            listHeaderDefinition[position] = &quot;\t\t{ \&quot;aTargets\&quot;: [&quot;+ position + &quot;], \&quot;name\&quot;: \&quot;&quot; + attributeName + &quot;\&quot;, \&quot;title\&quot;: \&quot;&quot; + displayName + &quot;\&quot;, \&quot;type\&quot;: \&quot;&quot; + sTipo + &quot;\&quot;, \&quot;data\&quot;: \&quot;&quot; + attributeName + &quot;\&quot; }&quot;;
    }
    string headerDefinition = String.Join(&quot;,\n&quot;, listHeaderDefinition);            
    return headerDefinition;
}</code>
            </pre>
        </div>
    </div>

</div>

<br /><br />

<table id="example" class="display" cellspacing="0" width="100%">
    <thead></thead>
    <tbody></tbody>
</table>