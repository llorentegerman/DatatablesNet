@model IEnumerable<DatatablesNet.Models.Contacto>
@{
    ViewBag.Title = "Ejemplo7";
}

@section headSection {
}

@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $('#example').DataTable({
                columns: [
                    //Extraigo la definición de las columnas desde el mismo modelo.
                    //Posiciono las columnas según el orden en el que aparezcan en la lista pasada por parámetro.
                    //Si no deseo mostrar alguna columna, simplemente la borro de esta lista.
                    @Html.Raw(DatatablesNet.Auxiliares.DataTablesAux.ColumnsFromModel(typeof(DatatablesNet.Models.Contacto),
                        new List<string>() { "Nombre", "Localidad", "Id", "Direccion", "Apellido", "Email", "Telefono" }) //Posiciones
                    )
                ],
                //Por defecto cargo una página
                aaData: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, Newtonsoft.Json.Formatting.None, new Newtonsoft.Json.Converters.IsoDateTimeConverter() { DateTimeFormat = "yyyy/MM/dd" })),
                processing: true,
                serverSide: true,
                ajax: {
                    url: "@Url.Action("SearchDataTable")",
                    type: 'POST' //Por defecto utiliza GET
                },
                deferLoading: @ViewBag.TotalFilas, //Con este parametro le decimos a DataTables, cual es el tamaño real de nuestro set de datos.
                searchDelay: 500,   //Se realiza una búsqueda cada medio segundo, siempre y cuando se haya ingresado algun valor en el campo de búsqueda.
                                    //https://datatables.net/forums/discussion/23970/1-10-3-searchdelay-not-working-properly
            });

        });
    </script>
}

<h2>Ejemplo 7 - Server Side, Búsqueda y Ordenamiento</h2>


<p>
    En este ejemplo vamos a ver como realizar busquedas y ordenamientos del lado del servidor.<br />
    Como veremos se modifica un poco el método SearchDataTable.<br />
    En este caso el método funciona especificamente para este Modelo, mas adelante vamos a ver como hacerlo genérico, es decir,
    un unico método de busqueda, para cualquier Modelo.
</p>
<a class="btn btn-primary" role="button" data-toggle="collapse" href="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
    View Source Code - Ver Codigo Fuente
</a>
<div class="collapse" id="collapseExample">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="active"><a href="#html1" aria-controls="html1" role="tab" data-toggle="tab">HTML</a></li>
        <li role="presentation"><a href="#javascript1" aria-controls="javascript1" role="tab" data-toggle="tab">Javascript</a></li>
        <li role="presentation"><a href="#css1" aria-controls="css1" role="tab" data-toggle="tab">CSS</a></li>
        <li role="presentation"><a href="#csharp1" aria-controls="csharp1" role="tab" data-toggle="tab">C# (Backend)</a></li>
        <li role="presentation"><a href="#csharp1_2" aria-controls="csharp1_2" role="tab" data-toggle="tab">C# (SearchDataTable)</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="html1">
            <pre>
<code class="language-html">&lt;table id=&quot;example&quot; class=&quot;display&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;
    &lt;thead&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;        
    &lt;/tbody&gt;
&lt;/table&gt;</code>
            </pre>
        </div>
        <div role="tabpanel" class="tab-pane" id="javascript1">
            <pre>
<code class="language-javascript">$(document).ready(function () {
    $('#example').DataTable({
        columns: [
            //Extraigo la definición de las columnas desde el mismo modelo.
            //Posiciono las columnas según el orden en el que aparezcan en la lista pasada por parámetro.
            //Si no deseo mostrar alguna columna, simplemente la borro de esta lista.
            @@Html.Raw(DatatablesNet.Auxiliares.DataTablesAux.ColumnsFromModel(typeof(DatatablesNet.Models.Contacto),
                new List<string>() { "Nombre", "Localidad", "Id", "Direccion", "Apellido", "Email", "Telefono" }) //Posiciones
            )
        ],
        //Por defecto cargo una página
        aaData: @@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, Newtonsoft.Json.Formatting.None, new Newtonsoft.Json.Converters.IsoDateTimeConverter() { DateTimeFormat = "yyyy/MM/dd" })),
        processing: true,
        serverSide: true,
        ajax: {
            url: "@Url.Action("SearchDataTable")",
            type: 'POST' //Por defecto utiliza GET
        },
        deferLoading: @ViewBag.TotalFilas, //Con este parametro le decimos a DataTables, cual es el tamaño real de nuestro set de datos.
        searchDelay: 500,   //Se realiza una búsqueda cada medio segundo, siempre y cuando se haya ingresado algun valor en el campo de búsqueda. 
                            //https://datatables.net/forums/discussion/23970/1-10-3-searchdelay-not-working-properly
    });
});</code>
            </pre>
        </div>

        <div role="tabpanel" class="tab-pane" id="css1">...</div>
        <div role="tabpanel" class="tab-pane" id="csharp1">
            <pre>
<code class="language-csharp">public ActionResult Ejemplo7()
{   
    List&lt;Contacto&gt; model = Contactos.Skip(0).Take(10).ToList();
    ViewBag.TotalFilas = Contactos.Count;
    return View(model);
}</code>
            </pre>
        </div>
        <div role="tabpanel" class="tab-pane" id="csharp1_2">
            <pre>
<code class="language-csharp">[HttpPost]
public JsonResult SearchDataTable()
{
    DataTablesRequest req = DataTablesRequest.ExtractFormRequest(Request.Form);
    string valorBusqueda = req.searchValue.ToLower();
    int salteo = req.start;
    int muestro = req.length;
    
    //Busco coincidencias por todos los campos del Modelo.
    var consultaBasica = Contactos.Where(c =&gt;
            c.Apellido.ToLower().IndexOf(valorBusqueda) &gt;= 0 ||
            c.Direccion.ToLower().IndexOf(valorBusqueda) &gt;= 0 ||
            c.Email.ToLower().IndexOf(valorBusqueda) &gt;= 0 ||
            c.Id.ToString().IndexOf(valorBusqueda) &gt;= 0 ||
            c.Localidad.ToLower().IndexOf(valorBusqueda) &gt;= 0 ||
            c.Nombre.ToLower().IndexOf(valorBusqueda) &gt;= 0 ||
            c.Telefono.ToLower().IndexOf(valorBusqueda) &gt;= 0
    );
    
    var consulta = consultaBasica.Skip(salteo).Take(muestro);
    
    PropertyDescriptorCollection properties = TypeDescriptor.GetProperties(typeof(Contacto)); //Extraigo los campos del modelo, para aplicar m&#233;todos de ordenamiento
    
    foreach (int orderColumnIndex in req.orderColumn)
    {
        //Puedo ordenar por mas de un campo, por lo tanto, por cada uno, extraigo el nombre,
        //me fijo si es ascendente o descendente, y concateno el ordenamiento a la consulta.
        string columnToOrder = req.columnsName[orderColumnIndex].ToLower();
        string orderDirection = req.orderDir[req.orderColumn.IndexOf(orderColumnIndex)].ToLower();
        PropertyDescriptor prop = properties.Find(columnToOrder, true);
        if (orderDirection.Equals(&quot;asc&quot;))
            consulta = consulta.OrderBy(x =&gt; prop.GetValue(x));
        else
            consulta = consulta.OrderByDescending(x =&gt; prop.GetValue(x));
    }
    //Extraigo las columnas searchables, esto lo voy a utilizar en el m&#233;todo generico.
    List&lt;int&gt; searchableIndex = new List&lt;int&gt;();
    for (int i = 0; i &lt; req.columnsSearchable.Count; i++)
    {
        if (req.columnsSearchable[i])
        {
            searchableIndex.Add(i);
        }
    }
    
    List&lt;Contacto&gt; model = consulta.ToList(); //Realizo la consulta
    int cantidadFiltrados = consultaBasica.Count();
    string json = JsonConvert.SerializeObject(model, Formatting.None, new IsoDateTimeConverter() { DateTimeFormat = &quot;dd/MM/yyyy&quot; });
    DataTablesResponse respuesta = new DataTablesResponse();
    respuesta.data = model;
    respuesta.draw = req.draw;
    respuesta.recordsFiltered = cantidadFiltrados;
    respuesta.recordsTotal = Contactos.Count();
    return Json(respuesta, JsonRequestBehavior.AllowGet);
}</code>
            </pre>
        </div>
    </div>

</div>

<br /><br />

<table id="example" class="display" cellspacing="0" width="100%">
    <thead></thead>
    <tbody></tbody>
</table>