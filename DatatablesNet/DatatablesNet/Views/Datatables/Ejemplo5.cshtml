@model IEnumerable<DatatablesNet.Models.Contacto>
@{
    ViewBag.Title = "Ejemplo5";
}

@section headSection {
}

@section scripts{
    <script type="text/javascript">
        $(document).ready(function () {
            $('#example').DataTable({
                aoColumnDefs: [
                    @Html.Raw(DatatablesNet.Auxiliares.DataTablesAux.ColumnsFromModel(typeof(DatatablesNet.Models.Contacto))),
                    {
                        "class": "all", //Con esta clase, esta columna estara siempre visible aunque achiquemos la pantalla.
                        "render": function (data, type, row) {
                            var retorno = '<a title="Eliminar" onclick="alert(\'Eliminar el contacto con ID = ' + row['Id'] + '\') " >';
                            retorno += '	<span class="glyphicon glyphicon-remove" />';
                            retorno += '</a>';
                            return retorno;
                        },
                        "aTargets": [7] //Ubico esta nueva fila al final, eran en total 7, que iban del 0 al 6. Ahora con esta, tenemos 8 columnas.
                    },
                    { "class": "never", "aTargets": [0] }, //Con la calse 'never' indicamos que esa columna no estara nunca visible.
                    { "class": "none", "aTargets": [6] }, //Con la clase 'none' indicamos que esa columna solo estara disponible como childRow.
                ],
                responsive : true,
                aaData: @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, Newtonsoft.Json.Formatting.None, new Newtonsoft.Json.Converters.IsoDateTimeConverter() { DateTimeFormat = "yyyy/MM/dd" })),
            });

        });
    </script>
}

<h2>Ejemplo 5 - Responsive y Columnas Ocultas</h2>


<p>
    Veremos como ocultar columnas pero dejándolas disponibles para potenciales usos.<br />
    En este ejemplo en particular, veremos como ocultar la columna ID, y crearemos una nueva columna con un botón que nos mostrará un alerta
    con el ID de la fila seleccionada. También ocultaremos pero de forma 'parcial' la columna Email, la cual podremos ver haciendo
    click sobre el boton verde que aparece en cada fila.<br />
    Para esto utilizaremos la propiedad <a href="https://datatables.net/extensions/responsive/" target="_blank">responsive</a> 
    que tiene esta libreria (notar que incluimos un nuevo archivo .js y un .css) y 
    diferentes clases para controlar la visibilidad de las columnas, que podemos ver en este <a href="https://datatables.net/extensions/responsive/examples/display-control/classes.html" target="_blank">link</a>.
    <br />
    A medida que se achica la pantalla van desapareciendo columnas que podremos seguir viendo al presionar el boton verde.<br />
    Notar que la columna con el botón que creamos no desaparece aunque achiquemos al máximo la pantalla, porque tiene asignada una de las clases
    que la mantiene siempre visible.<br />
    Notar en las opciones de inicialización de la tabla, que cambiamos <b>columns</b> por <b>aoColumnDefs</b>.
</p>
<a class="btn btn-primary" role="button" data-toggle="collapse" href="#collapseExample" aria-expanded="false" aria-controls="collapseExample">
    View Source Code - Ver Codigo Fuente
</a>
<div class="collapse" id="collapseExample">
    <!-- Nav tabs -->
    <ul class="nav nav-tabs" role="tablist">
        <li role="presentation" class="active"><a href="#html1" aria-controls="html1" role="tab" data-toggle="tab">HTML</a></li>
        <li role="presentation"><a href="#javascript1" aria-controls="javascript1" role="tab" data-toggle="tab">Javascript</a></li>
        <li role="presentation"><a href="#css1" aria-controls="css1" role="tab" data-toggle="tab">CSS</a></li>
        <li role="presentation"><a href="#csharp1" aria-controls="csharp1" role="tab" data-toggle="tab">C# (Backend)</a></li>
        <li role="presentation"><a href="#csharp1_2" aria-controls="csharp1_2" role="tab" data-toggle="tab">C# (ColumnsFromModel)</a></li>
    </ul>

    <!-- Tab panes -->
    <div class="tab-content">
        <div role="tabpanel" class="tab-pane active" id="html1">
            <pre>
<code class="language-html">&lt;table id=&quot;example&quot; class=&quot;display&quot; cellspacing=&quot;0&quot; width=&quot;100%&quot;&gt;
    &lt;thead&gt;
    &lt;/thead&gt;
    &lt;tbody&gt;        
    &lt;/tbody&gt;
&lt;/table&gt;</code>
            </pre>
        </div>
        <div role="tabpanel" class="tab-pane" id="javascript1">
            <pre>
<code class="language-javascript"> &lt;script src="https://cdn.datatables.net/responsive/1.0.7/js/dataTables.responsive.min.js"&gt;&lt;/script&gt;
                
&lt;script type=&quot;text/javascript&quot;&gt;
    $(document).ready(function () {
        $('#example').DataTable({
            aoColumnDefs: [
                @@Html.Raw(DatatablesNet.Auxiliares.DataTablesAux.ColumnsFromModel(typeof(DatatablesNet.Models.Contacto))),
                {
                    &quot;class&quot;: &quot;all&quot;, //Con esta clase, esta columna estara siempre visible aunque achiquemos la pantalla.
                    &quot;render&quot;: function (data, type, row) {
                        var retorno = '&lt;a title=&quot;Eliminar&quot; onclick=&quot;alert(\'Eliminar el contacto con ID = ' + row['Id'] + '\') &quot; &gt;';
                        retorno += '    &lt;span class=&quot;glyphicon glyphicon-remove&quot; /&gt;';
                        retorno += '&lt;/a&gt;';
                        return retorno;
                    },
                    &quot;aTargets&quot;: [7] //Ubico esta nueva fila al final, eran en total 7, que iban del 0 al 6. Ahora con esta, tenemos 8 columnas.
                },
                { &quot;class&quot;: &quot;never&quot;, &quot;aTargets&quot;: [0] }, //Con la calse 'never' indicamos que esa columna no estara nunca visible.
                { &quot;class&quot;: &quot;none&quot;, &quot;aTargets&quot;: [6] }, //Con la clase 'none' indicamos que esa columna solo estara disponible como childRow.
            ],
            responsive : true,
            aaData: @@Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model, Newtonsoft.Json.Formatting.None, new Newtonsoft.Json.Converters.IsoDateTimeConverter() { DateTimeFormat = &quot;yyyy/MM/dd&quot; })),
        });
    });
&lt;/script&gt;</code>
            </pre>
        </div>

        <div role="tabpanel" class="tab-pane" id="css1">
            <pre>
<code class="language-css">&lt;link href=&quot;https://cdn.datatables.net/responsive/1.0.7/css/responsive.dataTables.min.css&quot; rel=&quot;stylesheet&quot; /&gt;</code>
            </pre>
        </div>
        <div role="tabpanel" class="tab-pane" id="csharp1">
            <pre>
<code class="language-csharp">public ActionResult Ejemplo5()
{   
    return View(Contactos);
}</code>
            </pre>
        </div>
        <div role="tabpanel" class="tab-pane" id="csharp1_2">
            <pre>
<code class="language-csharp">public static string ColumnsFromModel(Type modelType, List&lt;string&gt; ColumnsOrder = null)
{
    PropertyInfo[] props = modelType.GetProperties(); //Obtengo todos los atributos de la clase
    int cantidadDeColumnas = ColumnsOrder == null ? props.Count() : ColumnsOrder.Count;
    
    string[] listHeaderDefinition = new string[cantidadDeColumnas];
    for(int i= 0; i &lt; props.Count(); i++)
    {
        PropertyInfo prop = props[i];
        string attributeName = prop.Name;
        //Extraigo el DisplayAttribute, el cual utilizamos para definir cual sera el titulo a mostrar de esa columna.
        //En caso de que no tenga, utilizo como displayName el nombre del atributo.
        DisplayAttribute displayAttribute = prop.GetCustomAttributes(typeof(DisplayAttribute), false).FirstOrDefault() as DisplayAttribute;
        string displayName = displayAttribute != null ? displayAttribute.Name : attributeName.ToLower(); //Lo extraigo.
        //Segun el tipo del atributo, lo mapeo a su correspondiente tipo en Datatables
        string sType = prop.PropertyType.ToString().ToLower();
        string sTipo = &quot;string&quot;; //Type por defecto.
        if (sType.IndexOf(&quot;int&quot;) &gt;= 0 || sType.IndexOf(&quot;double&quot;) &gt;= 0 || sType.IndexOf(&quot;float&quot;) &gt;= 0 ||
            sType.IndexOf(&quot;real&quot;) &gt;= 0 || sType.IndexOf(&quot;single&quot;) &gt;= 0)
        {
            sTipo = &quot;num&quot;;
        }
        else if (sType.IndexOf(&quot;date&quot;) &gt;= 0)
        {
            sTipo = &quot;custom-date&quot;; //Este es un tipo customizado, creado para que las fechas se adapten al formato dd/MM/yyyy
        }
        int position = i;   //Si no definí ColumnsOrder, entonces las columnas se mostraran en el orden en el que estan 
                            //definidos los atributos.        
        if (ColumnsOrder != null)
        {
            position = ColumnsOrder.FindIndex(c =&gt; c.ToLower().Trim().Equals(attributeName.ToLower().Trim()));
        }
        if(position &gt;= 0) //position sera &lt; 0, solo si no inclui a esta columna dentro de &quot;ColumnsOrder&quot;
            listHeaderDefinition[position] = &quot;\t\t{ \&quot;aTargets\&quot;: [&quot;+ position + &quot;], \&quot;name\&quot;: \&quot;&quot; + attributeName + &quot;\&quot;, \&quot;title\&quot;: \&quot;&quot; + displayName + &quot;\&quot;, \&quot;type\&quot;: \&quot;&quot; + sTipo + &quot;\&quot;, \&quot;data\&quot;: \&quot;&quot; + attributeName + &quot;\&quot; }&quot;;
    }
    string headerDefinition = String.Join(&quot;,\n&quot;, listHeaderDefinition);            
    return headerDefinition;
}</code>
            </pre>
        </div>
    </div>

</div>

<br /><br />

<table id="example" class="display" cellspacing="0" width="100%">
    <thead></thead>
    <tbody></tbody>
</table>